import AIRouter from '@/lib/ai-router';
import { ROLES, getRoleById } from '@/lib/roles';
import { getKnowledgeForRole } from '@/lib/knowledge-base';

// Initialize AI Router
const aiRouter = new AIRouter();

// Enhanced AI capabilities
const ENHANCED_TASKS = {
  'release_checklist': {
    trigger: ['release', 'checklist', 'plan', 'launch'],
    template: "Generate a comprehensive release checklist for {releaseType} with timeline:\n\n**PRE-PRODUCTION (8-12 weeks before)**\n- [ ] Finalize track selection and order\n- [ ] Create/verify split sheets in indii.music\n- [ ] Register with PRO (ASCAP/BMI/SESAC)\n- [ ] Plan marketing strategy\n\n**PRODUCTION (6-8 weeks before)**\n- [ ] Complete mixing and mastering\n- [ ] Create high-resolution artwork (3000x3000px)\n- [ ] Prepare metadata (ISRC, genre, mood tags)\n- [ ] Set up Sound Locker exclusive content\n\n**PRE-RELEASE (4-6 weeks before)**\n- [ ] Submit to indii.music distribution\n- [ ] Generate smart links and EPK\n- [ ] Pitch to playlist curators\n- [ ] Schedule social media content\n\n**RELEASE WEEK**\n- [ ] Monitor analytics dashboard\n- [ ] Engage with fans via Sound Locker\n- [ ] Share on social media\n- [ ] Track playlist adds\n\n**POST-RELEASE (1-4 weeks after)**\n- [ ] Analyze performance metrics\n- [ ] Plan follow-up content\n- [ ] Consider sync licensing opportunities\n- [ ] Prepare next release\n\nGenerated by AI-powered release checklist generator."
  },
  
  'social_media_post': {
    trigger: ['post', 'social', 'instagram', 'twitter', 'tiktok'],
    template: "NEW MUSIC ALERT!\n\n{trackTitle} is now live on indii.music!\n\n{genreVibes} vibes for your {mood} playlist\nStream now: [indii.music link]\nExclusive content in Sound Locker\nAvailable on all platforms\n\n#{genre} #indiimusic #independentartist #newmusic #{artistName}\n\n---\nVisual suggestion: Studio shot with artwork overlay\nBest posting time: {timeRecommendation}\nTarget: {targetAudience}"
  },
  
  'royalty_explanation': {
    trigger: ['royalty', 'earnings', 'revenue', 'payment'],
    template: "**Your Royalty Breakdown - Simple Explanation**\n\n**Total Earnings:** {totalEarnings}\n**Change from last month:** {changePercent}%\n\n**Where your money came from:**\nStreaming (Spotify, Apple Music): {streamingRevenue}\nPerformance (ASCAP/BMI): {performanceRevenue}\nSync Licensing: {syncRevenue}\nSound Locker Sales: {directRevenue}\n\n**Platform fees (transparent):**\n- indii.music commission: {platformFee}% ({platformFeeAmount})\n- Payment processing: {processingFee}\n- **You keep:** {netPayout} ({artistShare}%)\n\n**What this means:** {explanation}\n\n**Next steps:** {recommendations}"
  }
};

// Check if Gemini is configured
const isGeminiConfigured = () => {
  return process.env.GEMINI_API_KEY && process.env.GEMINI_API_KEY.trim() !== '';
};

// Initialize Gemini provider if API key is available
if (isGeminiConfigured()) {
  aiRouter.initializeProvider('gemini', {
    apiKey: process.env.GEMINI_API_KEY
  });
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST']);
    return res.status(405).json({ error: "Method " + req.method + " Not Allowed" });
  }

  try {
    const { message, role = 'general' } = req.body;

    if (!message || message.trim() === '') {
      return res.status(400).json({ error: 'Message is required' });
    }

    // Handle system commands
    if (message.startsWith('/')) {
      const reply = handleSystemCommands(message, role);
      return res.status(200).json({ reply, role });
    }

    // Check if AI is configured
    if (!isGeminiConfigured()) {
      const reply = "Hello! I'm your indii.music AI assistant. \n\nI'm ready to help with:\n" + Object.values(ROLES).map(r => r.icon + " " + r.name + " - " + r.description).join('\n') + "\n\nHowever, I need to be configured with an API key first. Please provide your Gemini API key to enable AI responses.\n\nFor now, try these system commands:\n/help - Show available commands\n/roles - List all available roles\n/demo - See enhanced AI capabilities\n/status - Check system status";

      return res.status(200).json({ reply, role: 'general' });
    }

    // Enhanced AI task detection
    const detectedTask = detectEnhancedTask(message);
    let enhancedMessage = message;

    if (detectedTask) {
      enhancedMessage = message + "\n\n[ENHANCED TASK: " + detectedTask + "]";
    }

    // Get role information
    const roleInfo = getRoleById(role);
    
    // Enhance message with role-specific knowledge
    const knowledge = getKnowledgeForRole(role);
    const contextualMessage = enhanceMessageWithKnowledge(enhancedMessage, knowledge, roleInfo);

    // Generate AI response
    const aiResponse = await aiRouter.route(contextualMessage, { role });
    
    // Format response with role context
    const reply = formatResponse(aiResponse, roleInfo);

    return res.status(200).json({ reply, role });

  } catch (error) {
    console.error('Chat API error:', error);
    return res.status(500).json({ 
      error: 'Sorry, I encountered an error. Please try again.',
      details: error.message 
    });
  }
}

function detectEnhancedTask(message) {
  const lowerMessage = message.toLowerCase();
  
  for (const [taskType, config] of Object.entries(ENHANCED_TASKS)) {
    if (config.trigger.some(trigger => lowerMessage.includes(trigger))) {
      return taskType;
    }
  }
  
  return null;
}

function handleSystemCommands(message, role) {
  const [command, ...args] = message.split(' ');
  
  switch (command) {
    case '/help':
      return "[MUSIC] **indii.music AI Assistant Commands**\n\n**System Commands:**\n/help - Show this help message\n/roles - List all available roles\n/demo - See enhanced AI capabilities\n/status - Check system status\n/switch [role] - Switch to a different role\n\n**Available Roles:**\n" + Object.values(ROLES).map(r => r.icon + " " + r.name + " (" + r.id + ")").join('\n') + "\n\n**Enhanced AI Features:**\n- Release checklist generation\n- Social media post creation\n- Royalty explanations\n- Marketing strategy advice\n- Career development guidance\n\nJust start typing to chat with me in any role!";

    case '/roles':
      return "[MASKS] **Available indii.music AI Assistants**\n\n" + Object.values(ROLES).map(role => 
        role.icon + " **" + role.name + "** (" + role.id + ")\n  " + role.description + "\n  \n  **Expertise:** " + role.expertise.join(', ') + "\n  " + (role.id === role ? '← *Currently Active*' : '')
      ).join('\n\n') + "\n\nUse /switch [role-id] to switch roles or just mention what you need help with!";

    case '/demo':
      return "[ROCKET] **Enhanced AI Capabilities Demo**\n\n**[MUSIC] Artist Assistant Powers:**\n- 'Help me create a release checklist' -> Full timeline with tasks\n- 'Write an Instagram post for my new song' -> Platform-optimized content\n- 'Explain my royalty statement' -> Clear revenue breakdown\n- 'Plan my marketing strategy' -> Comprehensive campaign plan\n\n**[HEADPHONES] Fan Assistant Powers:**\n- 'Create a chill playlist for studying' -> Personalized recommendations\n- 'Find artists similar to [artist]' -> Discovery suggestions\n- 'What\'s new in indie rock?' -> Latest releases and trends\n\n**[FILM] Sync Licensing Powers:**\n- 'Find music for a car commercial' -> Filtered search results\n- 'Explain sync licensing terms' -> Clear contract guidance\n\n**Try asking me anything! I\'m powered by advanced AI with deep music industry knowledge.**";

    case '/status':
      return "[FIRE] **indii.music System Status**\n\n[MUSIC] **Application:** Running on localhost:2001\n[ROBOT] **AI System:** " + (isGeminiConfigured() ? '[CHECK] Fully Operational (Gemini-powered)' : '[X] Not configured') + "\n[MASKS] **Active Roles:** " + Object.keys(ROLES).length + " specialized assistants\n[BOOKS] **Knowledge Base:** [CHECK] Loaded with music industry expertise\n[ROCKET] **Enhanced Features:** [CHECK] Release planning, social media, royalty analysis\n[TOOL] **API Integration:** [CHECK] Multi-provider support ready\n\n**Current Role:** " + getRoleById(role).name + "\n\n" + (isGeminiConfigured() ? '[NOTES] Ready to help with your music career!' : '[WARNING] Please configure API key to enable AI responses.') + "\n\n**Next Updates:** User management, file uploads, dashboard widgets";

    case '/switch':
      const newRole = args[0];
      if (!newRole) {
        return 'Please specify a role. Usage: /switch [role-id]\nAvailable roles: ' + Object.values(ROLES).map(r => r.id).join(', ');
      }
      
      const roleInfo = getRoleById(newRole);
      if (roleInfo.id === 'general' && newRole !== 'general') {
        return "Role '" + newRole + "' not found. Available roles: " + Object.values(ROLES).map(r => r.id).join(', ');
      }
      
      return "[MASKS] **Switched to " + roleInfo.name + "**\n\n" + roleInfo.icon + " **" + roleInfo.name + "**\n" + roleInfo.description + "\n\n**My expertise:** " + roleInfo.expertise.join(', ') + "\n\nHow can I help you today?";

    default:
      return "Unknown command: " + command + ". Type /help for available commands.";
  }
}

function enhanceMessageWithKnowledge(message, knowledge, roleInfo) {
  const context = "You are " + roleInfo.name + " for indii.music. \nYour expertise: " + roleInfo.expertise.join(', ') + ".\nYour role: " + roleInfo.description + ".\n\nPlatform context: indii.music is a comprehensive ecosystem for independent artists featuring integrated distribution, royalty management, AI assistance, collaboration tools, sync licensing, fan engagement, and service marketplace.\n\nKey principles: Integration, Transparency, Fairness, Artist Empowerment.\n\nRelevant knowledge: " + JSON.stringify(knowledge, null, 2) + "\n\nPlease provide helpful, accurate, and actionable guidance. Be specific about indii.music features when relevant.";

  return context + "\n\nUser: " + message;
}

function formatResponse(aiResponse, roleInfo) {
  return roleInfo.icon + " **" + roleInfo.name + "**\n\n" + aiResponse;
}

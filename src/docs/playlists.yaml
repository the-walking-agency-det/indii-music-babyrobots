openapi: 3.0.0
paths:
  /api/playlists:
    get:
      tags:
        - Playlists
      summary: Get all playlists
      description: Retrieve a list of all playlists (public ones and user's private playlists)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: List of playlists retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      playlists:
                        type: array
                        items:
                          $ref: '#/components/schemas/Playlist'
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                            example: 1
                          totalPages:
                            type: integer
                            example: 5
                          totalItems:
                            type: integer
                            example: 100
    post:
      tags:
        - Playlists
      summary: Create a new playlist
      description: Create a new playlist for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "Summer Hits"
                description:
                  type: string
                  maxLength: 500
                  example: "My favorite summer tracks"
                isPublic:
                  type: boolean
                  default: false
                  example: true
                tracks:
                  type: array
                  items:
                    type: string
                  example: ["507f1f77bcf86cd799439011"]
      responses:
        '201':
          description: Playlist created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Playlist created successfully"
                  data:
                    $ref: '#/components/schemas/Playlist'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/playlists/{id}:
    get:
      tags:
        - Playlists
      summary: Get a specific playlist
      description: Retrieve details of a specific playlist by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Playlist ID
      responses:
        '200':
          description: Playlist details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: '#/components/schemas/Playlist'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Playlist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Playlists
      summary: Update a playlist
      description: Update details of an existing playlist
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Playlist ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                description:
                  type: string
                  maxLength: 500
                isPublic:
                  type: boolean
                tracks:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Playlist updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Playlist updated successfully"
                  data:
                    $ref: '#/components/schemas/Playlist'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Playlist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Playlists
      summary: Delete a playlist
      description: Remove a playlist from the system
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Playlist ID
      responses:
        '200':
          description: Playlist deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Playlist deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Playlist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Playlist:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Summer Hits"
        description:
          type: string
          example: "My favorite summer tracks"
        isPublic:
          type: boolean
          example: true
        userId:
          type: string
          example: "507f1f77bcf86cd799439012"
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
